import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { useAppStore } from '../store/useAppStore';
import { DataFetchingService, type DataFetchRequest, type DataFetchResponse, type FetchingMetrics } from '../services/DataFetchingService';
import type { ChartConfig } from '../types';

/**
 * Autonomous Data Fetching Hook
 * 
 * Integrates the DataFetchingService with React store subscriptions to provide
 * intelligent, automatic data fetching based on chart configuration changes.
 */

export interface UseAutonomousDataFetchingOptions {
  /** Enable automatic data fetching on store changes */
  enableAutoFetch?: boolean;
  
  /** Debounce delay for fetch requests (ms) */
  debounceMs?: number;
  
  /** Enable background prefetching */
  enablePrefetch?: boolean;
  
  /** Enable real-time data streaming */
  enableStreaming?: boolean;
  
  /** Columns to fetch from data server */
  dataColumns?: string[];
  
  /** Custom data fetching service configuration */
  serviceConfig?: Partial<ConstructorParameters<typeof DataFetchingService>[0]>;
}

export interface DataFetchingState {
  /** Current data fetching service instance */
  service: DataFetchingService | null;
  
  /** Loading states */
  isLoading: boolean;
  isFetching: boolean;
  isBackgroundFetching: boolean;
  
  /** Last successful fetch information */
  lastFetch: {
    symbol: string;
    timeRange: [number, number];
    timestamp: number;
    recordCount: number;
    fromCache: boolean;
  } | null;
  
  /** Error states */
  error: string | null;
  lastError: string | null;
  
  /** Performance metrics */
  metrics: FetchingMetrics;
  
  /** Current pending requests */
  pendingRequests: number;
  
  /** Cache statistics */
  cacheStats: {
    size: number;
    maxSize: number;
    hitRate: number;
    totalSize: number;
  };
}

export interface DataFetchingAPI {
  /** Manual data fetch */
  fetchData: (config?: Partial<ChartConfig>, priority?: 'low' | 'normal' | 'high') => Promise<DataFetchResponse>;
  
  /** Force refresh current data */
  refreshData: () => Promise<DataFetchResponse>;
  
  /** Prefetch data for symbol/timeframe */
  prefetchData: (symbol: string, timeframe: string) => Promise<void>;
  
  /** Clear all cached data */
  clearCache: () => void;
  
  /** Get detailed metrics */
  getDetailedMetrics: () => FetchingMetrics;
  
  /** Enable/disable auto-fetching */
  setAutoFetch: (enabled: boolean) => void;
  
  /** Configure data fetching service */
  configureService: (config: Partial<ConstructorParameters<typeof DataFetchingService>[0]>) => void;
}

export function useAutonomousDataFetching(
  options: UseAutonomousDataFetchingOptions = {}
): [DataFetchingState, DataFetchingAPI] {
  const {
    enableAutoFetch = true,
    debounceMs = 300,
    enablePrefetch = true,
    enableStreaming = false,
    dataColumns = ['time', 'best_bid', 'best_ask'],
    serviceConfig = {}
  } = options;

  // Get current store state and subscribe to changes
  const chartConfig = useAppStore(state => state.chartConfig);
  const currentSymbol = useAppStore(state => state.currentSymbol);
  const isConnected = useAppStore(state => state.isConnected);
  const updateMarketData = useAppStore(state => state.updateMarketData);

  // Store refs to avoid dependency issues
  const currentSymbolRef = useRef(currentSymbol);
  const updateMarketDataRef = useRef(updateMarketData);
  
  // Update refs when values change
  useEffect(() => {
    currentSymbolRef.current = currentSymbol;
  }, [currentSymbol]);
  
  useEffect(() => {
    updateMarketDataRef.current = updateMarketData;
  }, [updateMarketData]);

  // Memoize service config to prevent recreating
  const memoizedServiceConfig = useMemo(() => serviceConfig, [serviceConfig]);

  // Local state management
  const [fetchingState, setFetchingState] = useState<DataFetchingState>({
    service: null,
    isLoading: true,
    isFetching: false,
    isBackgroundFetching: false,
    lastFetch: null,
    error: null,
    lastError: null,
    metrics: {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      cacheHits: 0,
      cacheMisses: 0,
      averageLatency: 0,
      backgroundFetches: 0,
      prefetches: 0,
    },
    pendingRequests: 0,
    cacheStats: {
      size: 0,
      maxSize: 100,
      hitRate: 0,
      totalSize: 0,
    },
  });

  // Refs for stable references
  const serviceRef = useRef<DataFetchingService | null>(null);
  const debounceRef = useRef<NodeJS.Timeout>();
  const enableAutoFetchRef = useRef(enableAutoFetch);
  const pendingRequestsRef = useRef(0);
  const mountedRef = useRef(true);
  const fetchDataRef = useRef<typeof fetchData | null>(null);

  // Initialize data fetching service only once
  const initializedRef = useRef(false);
  
  useEffect(() => {
    if (initializedRef.current) {
      const stack = new Error().stack;
      console.log('[useAutonomousDataFetching] Skipping re-initialization (StrictMode)');
      console.log('[useAutonomousDataFetching] Skip called from:', stack?.split('\n').slice(1, 4).join('\n'));
      return; // Already initialized, prevent re-initialization
    }
    
    // Add stack trace to see where this hook is being called from
    const stack = new Error().stack;
    console.log('[useAutonomousDataFetching] Initializing data fetching service...');
    console.log('[useAutonomousDataFetching] Called from:', stack?.split('\n').slice(1, 6).join('\n'));
    initializedRef.current = true;

    const service = new DataFetchingService({
      prefetchEnabled: enablePrefetch,
      streamingEnabled: enableStreaming,
      backgroundFetchEnabled: true,
      maxConcurrentRequests: 6,
      cacheExpiryMs: 5 * 60 * 1000, // 5 minutes
      ...memoizedServiceConfig,
    });

    serviceRef.current = service;

    // Subscribe to fetch events
    const unsubscribe = service.subscribe((response: DataFetchResponse) => {
      if (!mountedRef.current) return;

      console.log('[useAutonomousDataFetching] Data fetch completed:', {
        success: response.success,
        symbol: response.metadata?.symbol,
        recordCount: response.metadata?.recordCount,
        cacheHit: response.metadata?.cacheHit,
      });

      if (response.success && response.metadata) {
        setFetchingState(prev => ({
          ...prev,
          lastFetch: {
            symbol: response.metadata!.symbol,
            timeRange: response.metadata!.timeRange,
            timestamp: Date.now(),
            recordCount: response.metadata!.recordCount,
            fromCache: response.metadata!.cacheHit,
          },
          error: null,
        }));

        // Update market data in store if this is current symbol
        if (response.metadata.symbol === currentSymbolRef.current) {
          // In a real implementation, we would parse the binary data
          // For now, we'll create mock market data
          const mockMarketData = {
            symbol: response.metadata.symbol,
            price: 50000 + Math.random() * 10000,
            change: (Math.random() - 0.5) * 1000,
            changePercent: (Math.random() - 0.5) * 5,
            volume: Math.random() * 1000000,
            timestamp: Math.floor(Date.now() / 1000),
          };

          updateMarketDataRef.current(response.metadata.symbol, mockMarketData);
        }
      } else if (response.error) {
        setFetchingState(prev => ({
          ...prev,
          error: response.error || 'Unknown error',
          lastError: response.error || 'Unknown error',
        }));
      }

      // Update metrics and cache stats
      updateMetricsAndStats();
    });

    setFetchingState(prev => ({
      ...prev,
      service,
      isLoading: false,
    }));

    return () => {
      const stack = new Error().stack;
      console.log('[useAutonomousDataFetching] Cleaning up service...');
      console.log('[useAutonomousDataFetching] Cleanup called from:', stack?.split('\n').slice(1, 4).join('\n'));
      unsubscribe();
      service.destroy();
      initializedRef.current = false;
    };
  }, [memoizedServiceConfig, enablePrefetch, enableStreaming, updateMetricsAndStats]); // Include dependencies

  // Update metrics and cache stats
  const updateMetricsAndStats = useCallback(() => {
    const service = serviceRef.current;
    if (!service || !mountedRef.current) return;

    const metrics = service.getMetrics();
    const cacheStats = service.getCacheStats();

    setFetchingState(prev => ({
      ...prev,
      metrics,
      cacheStats,
      pendingRequests: pendingRequestsRef.current,
    }));
  }, []);

  // Update pending requests counter
  const updatePendingRequests = useCallback((delta: number) => {
    pendingRequestsRef.current = Math.max(0, pendingRequestsRef.current + delta);
    
    setFetchingState(prev => ({
      ...prev,
      pendingRequests: pendingRequestsRef.current,
      isFetching: pendingRequestsRef.current > 0,
    }));
  }, []);

  // Core data fetching function
  const fetchData = useCallback(async (
    config?: Partial<ChartConfig>,
    priority: 'low' | 'normal' | 'high' = 'normal'
  ): Promise<DataFetchResponse> => {
    const service = serviceRef.current;
    if (!service) {
      return { success: false, error: 'Data fetching service not initialized' };
    }

    const targetConfig = config || chartConfig;
    const request: DataFetchRequest = {
      symbol: targetConfig.symbol,
      startTime: targetConfig.startTime,
      endTime: targetConfig.endTime,
      timeframe: targetConfig.timeframe,
      columns: dataColumns,
      priority,
      reason: config ? 'user_action' : 'auto_sync',
    };

    console.log('[useAutonomousDataFetching] Fetching data:', {
      symbol: request.symbol,
      timeRange: [request.startTime, request.endTime],
      reason: request.reason,
      priority: request.priority,
    });

    updatePendingRequests(1);

    try {
      const response = await service.fetchData(request);
      updateMetricsAndStats();
      return response;
    } catch (error) {
      console.error('[useAutonomousDataFetching] Fetch error:', error);
      return { success: false, error: String(error) };
    } finally {
      updatePendingRequests(-1);
    }
  }, [chartConfig, dataColumns, updatePendingRequests, updateMetricsAndStats]);

  // Update fetchData ref to avoid dependency cycles
  useEffect(() => {
    fetchDataRef.current = fetchData;
  }, [fetchData]);

  // Auto-fetch on store changes with debouncing
  useEffect(() => {
    if (!enableAutoFetchRef.current || !serviceRef.current || !isConnected) return;

    // Clear existing debounce timer
    if (debounceRef.current) {
      clearTimeout(debounceRef.current);
    }

    console.log('[useAutonomousDataFetching] Store state changed, scheduling auto-fetch...');

    // Set background fetching indicator
    setFetchingState(prev => ({ ...prev, isBackgroundFetching: true }));

    // Debounced fetch
    debounceRef.current = setTimeout(async () => {
      if (!mountedRef.current) return;

      console.log('[useAutonomousDataFetching] Executing auto-fetch');
      
      try {
        if (fetchDataRef.current) {
          await fetchDataRef.current();
        }
      } catch (error) {
        console.error('[useAutonomousDataFetching] Auto-fetch failed:', error);
      } finally {
        if (mountedRef.current) {
          setFetchingState(prev => ({ ...prev, isBackgroundFetching: false }));
        }
      }
    }, debounceMs);

    return () => {
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
      }
    };
  }, [chartConfig, currentSymbol, isConnected, debounceMs]);

  // Force refresh current data
  const refreshData = useCallback(async (): Promise<DataFetchResponse> => {
    const service = serviceRef.current;
    if (!service) {
      return { success: false, error: 'Service not initialized' };
    }

    console.log('[useAutonomousDataFetching] Force refreshing data');
    
    // Clear cache for current config to force fresh fetch
    service.clearCache();
    
    return fetchData(undefined, 'high');
  }, [fetchData]);

  // Prefetch data for specific symbol/timeframe
  const prefetchData = useCallback(async (symbol: string, timeframe: string): Promise<void> => {
    const service = serviceRef.current;
    if (!service) return;

    const now = Math.floor(Date.now() / 1000);
    const oneHourAgo = now - 3600;

    const request: DataFetchRequest = {
      symbol,
      startTime: oneHourAgo,
      endTime: now,
      timeframe,
      columns: dataColumns,
      priority: 'low',
      reason: 'prefetch',
    };

    console.log(`[useAutonomousDataFetching] Prefetching data for ${symbol} (${timeframe})`);
    
    updatePendingRequests(1);
    
    try {
      await service.fetchData(request);
      updateMetricsAndStats();
    } catch (error) {
      console.error('[useAutonomousDataFetching] Prefetch failed:', error);
    } finally {
      updatePendingRequests(-1);
    }
  }, [dataColumns, updatePendingRequests, updateMetricsAndStats]);

  // Clear cache
  const clearCache = useCallback(() => {
    const service = serviceRef.current;
    if (service) {
      service.clearCache();
      updateMetricsAndStats();
      console.log('[useAutonomousDataFetching] Cache cleared by user');
    }
  }, [updateMetricsAndStats]);

  // Get detailed metrics
  const getDetailedMetrics = useCallback((): FetchingMetrics => {
    const service = serviceRef.current;
    return service ? service.getMetrics() : fetchingState.metrics;
  }, [fetchingState.metrics]);

  // Enable/disable auto-fetching
  const setAutoFetch = useCallback((enabled: boolean) => {
    enableAutoFetchRef.current = enabled;
    console.log(`[useAutonomousDataFetching] Auto-fetch ${enabled ? 'enabled' : 'disabled'}`);
  }, []);

  // Configure service
  const configureService = useCallback((config: Partial<ConstructorParameters<typeof DataFetchingService>[0]>) => {
    // Note: This would require recreating the service with new config
    // For now, we'll just log the configuration change
    console.log('[useAutonomousDataFetching] Service configuration update requested:', config);
  }, []);

  // Cleanup on unmount
  useEffect(() => {
    mountedRef.current = true;
    
    return () => {
      mountedRef.current = false;
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
      }
    };
  }, []);

  // Update auto-fetch ref when option changes
  useEffect(() => {
    enableAutoFetchRef.current = enableAutoFetch;
  }, [enableAutoFetch]);

  // API object
  const api: DataFetchingAPI = {
    fetchData,
    refreshData,
    prefetchData,
    clearCache,
    getDetailedMetrics,
    setAutoFetch,
    configureService,
  };

  return [fetchingState, api];
}