[package]
name = "gpu-charts-data"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true

[features]
default = ["wasm"]
native = ["hyper", "hyper-tls", "tokio/full", "tokio-tungstenite", "memmap2", "zstd"]
wasm = ["wasm-bindgen", "wasm-bindgen-futures", "getrandom/js", "tokio/sync", "tokio/time"]

[dependencies]
# Workspace dependencies
gpu-charts-shared = { path = "../shared-types" }
gpu-charts-renderer = { path = "../renderer" }
wasm-bindgen = { workspace = true, optional = true }
wasm-bindgen-futures = { workspace = true, optional = true }
web-sys = { workspace = true, features = [
    "Window",
    "Document",
    "Element",
    "HtmlCanvasElement",
    "Request",
    "RequestInit", 
    "Response",
    "Headers",
    "ReadableStream",
    "console",
    "WebSocket",
    "BinaryType",
    "CloseEvent",
    "ErrorEvent",
    "MessageEvent",
    "AbortController",
    "AbortSignal"
] }
js-sys = { workspace = true }
wgpu = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
bincode = { workspace = true }
bytemuck = { workspace = true }
uuid = { workspace = true }
log = { workspace = true }
futures = { workspace = true }
reqwest = { workspace = true }

# Performance optimizations
lru = "0.12"
parking_lot = "0.12"

# HTTP/2 client
hyper = { version = "0.14", features = ["client", "http2"], optional = true }
hyper-tls = { version = "0.5", optional = true }
futures-util = "0.3"
bytes = "1.5"

# Compression
flate2 = "1.0"
brotli = "3.4"
zstd = { version = "0.13", optional = true, default-features = false }

# WebSocket
tokio-tungstenite = { version = "0.20", optional = true }

# WASM utilities
console_error_panic_hook = "0.1"

# Direct GPU parsing
memmap2 = { workspace = true, optional = true }
chrono = { workspace = true }

# WASM-specific
getrandom = { version = "0.2", features = ["js"], optional = true }

# Platform-specific dependencies
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tokio = { workspace = true, features = ["rt", "macros", "net", "fs"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
tokio = { workspace = true, default-features = false, features = ["rt", "macros"] }

[dev-dependencies]
criterion = { workspace = true }

[lib]
crate-type = ["cdylib", "rlib"]

[[bench]]
name = "data_parsing"
harness = false

[[bench]]
name = "buffer_management"
harness = false