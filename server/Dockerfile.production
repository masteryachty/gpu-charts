# Production Dockerfile with Let's Encrypt support
# Chef stage for better dependency caching
FROM rust:1.82-slim AS chef
RUN cargo install cargo-chef --locked
WORKDIR /usr/src/app

# Planner stage
FROM chef AS planner
COPY Cargo.toml ./Cargo.toml
COPY Cargo.lock ./Cargo.lock
COPY build.rs ./
COPY config.toml ./

# Remove workspace configuration from Cargo.toml if present
RUN sed -i '/\[workspace\]/d' ./Cargo.toml && \
    sed -i '/workspace\./d' ./Cargo.toml

RUN cargo chef prepare --recipe-path recipe.json

# Build stage
FROM chef AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

COPY --from=planner /usr/src/app/recipe.json recipe.json

# Build dependencies with cargo-chef (much better caching)
RUN CARGO_NET_GIT_FETCH_WITH_CLI=true cargo chef cook --release --recipe-path recipe.json

# Copy project files
COPY Cargo.toml ./Cargo.toml
COPY Cargo.lock ./Cargo.lock
COPY build.rs ./
COPY config.toml ./

# Remove workspace configuration from Cargo.toml if present
RUN sed -i '/\[workspace\]/d' ./Cargo.toml && \
    sed -i '/workspace\./d' ./Cargo.toml

# Copy actual source code
COPY src ./src

# Build the application with parallel compilation
RUN CARGO_NET_GIT_FETCH_WITH_CLI=true cargo build --release --jobs $(nproc)

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies including certbot
RUN apt-get update && apt-get install -y \
    ca-certificates \
    openssl \
    curl \
    cron \
    certbot \
    python3-certbot-nginx \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 -s /bin/bash server

# Create necessary directories
RUN mkdir -p /app/certs /app/webroot /data /var/log && \
    chown -R server:server /app /data

WORKDIR /app

# Copy the built binary
COPY --from=builder /usr/src/app/target/release/ultra_low_latency_server_chunked_parallel /app/server

# Copy certificate management scripts
COPY letsencrypt-setup.sh /app/
COPY generate-certs.sh /app/

# Make scripts executable
RUN chmod +x /app/letsencrypt-setup.sh /app/generate-certs.sh

# Copy entrypoint script
COPY docker-entrypoint.sh /app/
RUN chmod +x /app/docker-entrypoint.sh

# Set up cron job for certificate renewal (runs daily at 2 AM)
RUN echo "0 2 * * * /app/letsencrypt-setup.sh renew >> /var/log/letsencrypt.log 2>&1" | crontab -

# Expose HTTPS port and HTTP port for Let's Encrypt challenge
EXPOSE 8443 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD timeout 5s bash -c ':> /dev/tcp/127.0.0.1/8443' || exit 1

# Environment variables for production
ENV SSL_CERT_PATH=/app/certs/localhost.crt
ENV SSL_KEY_PATH=/app/certs/localhost.key
ENV DATA_PATH=/mnt/md/data
ENV WEBROOT_PATH=/app/webroot
ENV DOMAIN=api.rednax.io
ENV EMAIL=admin@rednax.io
ENV CERT_USER=server

# Switch to non-root user
USER server

# Use entrypoint script
ENTRYPOINT ["/app/docker-entrypoint.sh"]

# Default command
CMD ["./server"]